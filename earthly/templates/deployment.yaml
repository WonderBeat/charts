apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "earthly.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "earthly.name" . }}
    helm.sh/chart: {{ include "earthly.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "earthly.name" . }}
      helm.sh/chart: {{ include "earthly.chart" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/managed-by: {{ .Release.Service }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "earthly.name" . }}
        helm.sh/chart: {{ include "earthly.chart" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
    spec:
      containers:
      - name: buildkitd
        image: earthly/earthly:v0.6.24
        # image: earthly/buildkitd:v0.6.24
        command: ["/bin/sh", "-ec", "sleep 1000h"]
        # args: ["--ci", "+for-linux"]
        securityContext:
          privileged: true
        volumeMounts:
          - mountPath: /tmp/earthly
            name: buildkitd-temp
          - mountPath: /var/run/docker.sock
            name: dockersock
{{- if .Values.resources }}
        resources:
{{ toYaml .Values.resources | indent 12}}
{{- end }}
        env:
          # This needs to be on to allow remote Earthly clients.
          - name: NO_DOCKER
            value: "1"
          - name: BUILDKIT_TCP_TRANSPORT_ENABLED
            value: 'true'
          - name: CACHE_SIZE_MB
            value: '5000'
          # This should be enabled, and certificates configured in a production environment.
          - name: BUILDKIT_TLS_ENABLED
            value: 'false'
        ports:
          - containerPort: 8372
        #   - containerPort: 8370
      volumes:
        - name: buildkitd-temp
          emptyDir: {}
        - name: dockersock
          hostPath:
            path: /var/run/docker.sock
