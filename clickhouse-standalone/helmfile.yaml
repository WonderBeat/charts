environments:
  default:
    values:
      - secret.users.yaml
---
releases:
  - name: clickhouse-standalone
    namespace: db
    chart: main/raw
    values:
      - resources:
        - apiVersion: v1
          kind: ConfigMap
          metadata:
            name: clickhouse-config
          data:
            users.xml: |
{{ .Values.config | indent 14 }}
        - apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: ssd-200gb-pvc
            namespace: "db"
            annotations:
              volume.kubernetes.io/selected-node: k8s-2
          spec:
            accessModes:
              - ReadWriteOnce
            storageClassName: ssd-200-gb
            resources:
              requests:
                storage: 200Gi
        - apiVersion: batch/v1
          kind: CronJob
          metadata:
            name: clickhouse-backup
            labels:
              app: clickhouse-backup
          spec:
            schedule: "0 18 * * MON"
            jobTemplate:
              spec:
                template:
                  spec:
                    containers:
                     - name: clickhouse-backup
                       image: clickhouse/clickhouse-server:24.1.2.5-alpine
                       command:
                         - "/bin/sh"
                         - "-ec"
                         - |
                           MONDAY=$(clickhouse-client -h clickhouse-standalone -q "select toMonday(today())") 
                           PREVIOUS_MONDAY=$(clickhouse-client -h clickhouse-standalone -q "select toMonday(today() - 7)") 
                           clickhouse-client -h clickhouse-standalone -q "BACKUP DATABASE gladiators TO S3('https://gladiators-clickhouse-backup.s3.amazonaws.com/gladiators-$MONDAY', '{{ .Values.aws_access_key }}', '{{ .Values.aws_secret_key }}') SETTINGS base_backup = S3('https://gladiators-clickhouse-backup.s3.amazonaws.com/gladiators-$PREVIOUS_MONDAY', '{{ .Values.aws_access_key }}', '{{ .Values.aws_secret_key }}')" --send_timeout 7200 --receive_timeout 7200
                           clickhouse-client -h clickhouse-standalone -q "BACKUP DATABASE hattrick TO S3('https://gladiators-clickhouse-backup.s3.amazonaws.com/hattrick-$MONDAY', '{{ .Values.aws_access_key }}', '{{ .Values.aws_secret_key }}') SETTINGS base_backup = S3('https://gladiators-clickhouse-backup.s3.amazonaws.com/hattrick-$PREVIOUS_MONDAY', '{{ .Values.aws_access_key }}', '{{ .Values.aws_secret_key }}')" --send_timeout 7200 --receive_timeout 7200
                    restartPolicy: OnFailure
        - apiVersion: apps/v1
          kind: StatefulSet
          metadata: 
            name: clickhouse
            labels:
              app: clickhouse
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: clickhouse
            template:
              metadata:
                labels:
                  app: clickhouse
              spec:
                containers:
                  - name: clickhouse
                    image: clickhouse/clickhouse-server:24.1.2.5-alpine
                    volumeMounts:
                      - name: ch-data
                        mountPath: /var/lib/clickhouse
                      - name: users-config
                        mountPath: /etc/clickhouse-server/users.d
                    resources:
                      limits:
                        memory: "3G"
                volumes:
                  - name: users-config
                    configMap:
                      name: clickhouse-config
                  - name: ch-data
                    persistentVolumeClaim:
                      claimName: ssd-200gb-pvc
        - apiVersion: v1
          kind: Service
          metadata:
            name: clickhouse-standalone
          spec:
            selector:
              app: clickhouse
            ports:
              - protocol: TCP
                name: http
                port: 8123
                targetPort: 8123
              - protocol: TCP
                name: native
                port: 9000
                targetPort: 9000
