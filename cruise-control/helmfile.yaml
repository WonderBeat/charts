# repositories:
#   - name: bitnami
#     url: https://charts.bitnami.com/bitnami
releases:
  - name: cruise-control
    namespace: default
    chart: .
    values:
      - image:
          repository: adobe/cruise-control
          tag: latest
      - ui:
          ingress:
            enabled: true
            class: internalnginx
            host: cruise.dg
          enabled: true
          repository: gamori/cruise-control-ui
          tag: latest
        resources:
          limits:
            cpu: 1000m
            memory: 600Mi
      - config: |-
          bootstrap.servers=kafka-0.svc.cluster.local:9092
          zookeeper.connect= zookeeper-headless.default.svc.cluster.local:2181
          cruise.control.metrics.reporter.bootstrap.servers=kafka-0.svc.cluster.local:9092
          metric.sampler.class=com.linkedin.kafka.cruisecontrol.monitor.sampling.CruiseControlMetricsReporterSampler
          sampling.allow.cpu.capacity.estimation=true
          cruise.control.metrics.topic.auto.create=true
          cruise.control.metrics.topic.num.partitions=2
          cruise.control.metrics.topic.replication.factor=2
          metric.reporter.topic=__CruiseControlMetrics
          sample.store.class=com.linkedin.kafka.cruisecontrol.monitor.sampling.KafkaSampleStore

          # The config for the Kafka sample store to save the partition metric samples
          partition.metric.sample.store.topic=__KafkaCruiseControlPartitionMetricSamples

          # The config for the Kafka sample store to save the model training samples
          broker.metric.sample.store.topic=__KafkaCruiseControlModelTrainingSamples

          # The replication factor of Kafka metric sample store topic
          sample.store.topic.replication.factor=2

          # The config for the number of Kafka sample store consumer threads
          num.sample.loading.threads=8

          # The partition assignor class for the metric samplers
          metric.sampler.partition.assignor.class=com.linkedin.kafka.cruisecontrol.monitor.sampling.DefaultMetricSamplerPartitionAssignor

          # The metric sampling interval in milliseconds
          metric.sampling.interval.ms=120000

          # The partition metrics window size in milliseconds
          partition.metrics.window.ms=300000

          # The number of partition metric windows to keep in memory. Partition-load-history = num.partition.metrics.windows * partition.metrics.window.ms
          num.partition.metrics.windows=5

          # The minimum partition metric samples required for a partition in each window
          min.samples.per.partition.metrics.window=1

          # The broker metrics window size in milliseconds
          broker.metrics.window.ms=300000

          # The number of broker metric windows to keep in memory. Broker-load-history = num.broker.metrics.windows * broker.metrics.window.ms
          num.broker.metrics.windows=20

          # The minimum broker metric samples required for a partition in each window
          min.samples.per.broker.metrics.window=1

          # The configuration for the BrokerCapacityConfigFileResolver (supports JBOD, non-JBOD, and heterogeneous CPU core capacities)
          #capacity.config.file=config/capacity.json

          webserver.api.urlprefix=/kafkacruisecontrol/*
          # Location where the Cruise Control frontend is deployed
          webserver.ui.diskpath=./cruise-control-ui/dist/
          # URL path prefix for UI (dont forget the ending /*)
          webserver.ui.urlprefix=/*
          # Time After which request is converted to Async
          webserver.request.maxBlockTimeMs=10000
          # Default Session Expiry Period
          webserver.session.maxExpiryTimeMs=60000
          # Session cookie path
          webserver.session.path=/
          # Server Access Logs
          webserver.accesslog.enabled=true
          # Configurations for servlet
          # ==========================
          # Enable two-step verification for processing POST requests.
          two.step.verification.enabled=false
          # The maximum time in milliseconds to retain the requests in two-step (verification) purgatory.
          two.step.purgatory.retention.time.ms=1209600000
          # The maximum number of requests in two-step (verification) purgatory.
          two.step.purgatory.max.requests=25
          #Enable Vertx API with Swagger
          vertx.enabled=false
          webserver.http.address=0.0.0.0
          capacity.config.file=/opt/cruise-control/config/capacityJBOD.json
          # The list of supported intra-broker goals
          intra.broker.goals=com.linkedin.kafka.cruisecontrol.analyzer.goals.IntraBrokerDiskCapacityGoal,com.linkedin.kafka.cruisecontrol.analyzer.goals.IntraBrokerDiskUsageDistributionGoal

          # The list of supported hard goals -- consider using RackAwareDistributionGoal instead of RackAwareGoal in clusters with partitions whose replication factor > number of racks
          hard.goals=com.linkedin.kafka.cruisecontrol.analyzer.goals.RackAwareGoal,com.linkedin.kafka.cruisecontrol.analyzer.goals.ReplicaCapacityGoal,com.linkedin.kafka.cruisecontrol.analyzer.goals.DiskCapacityGoal,com.linkedin.kafka.cruisecontrol.analyzer.goals.NetworkInboundCapacityGoal,com.linkedin.kafka.cruisecontrol.analyzer.goals.NetworkOutboundCapacityGoal,com.linkedin.kafka.cruisecontrol.analyzer.goals.CpuCapacityGoal

          # The minimum percentage of well monitored partitions out of all the partitions
          min.valid.partition.ratio=0.95

          # The balance threshold for CPU
          cpu.balance.threshold=1.1

          # The balance threshold for disk
          disk.balance.threshold=1.1

          # The balance threshold for network inbound utilization
          network.inbound.balance.threshold=1.1

          # The balance threshold for network outbound utilization
          network.outbound.balance.threshold=1.1

          # The balance threshold for the replica count
          replica.count.balance.threshold=1.1

          # The capacity threshold for CPU in percentage
          cpu.capacity.threshold=0.7

          # The capacity threshold for disk in percentage
          disk.capacity.threshold=0.8

          # The capacity threshold for network inbound utilization in percentage
          network.inbound.capacity.threshold=0.8

          # The capacity threshold for network outbound utilization in percentage
          network.outbound.capacity.threshold=0.8

          # The threshold to define the cluster to be in a low CPU utilization state
          cpu.low.utilization.threshold=0.0

          # The threshold to define the cluster to be in a low disk utilization state
          disk.low.utilization.threshold=0.0

          # The threshold to define the cluster to be in a low network inbound utilization state
          network.inbound.low.utilization.threshold=0.0

          # The threshold to define the cluster to be in a low network outbound utilization state
          network.outbound.low.utilization.threshold=0.0

          # The metric anomaly percentile upper threshold
          metric.anomaly.percentile.upper.threshold=90.0

          # The metric anomaly percentile lower threshold
          metric.anomaly.percentile.lower.threshold=10.0

          # How often should the cached proposal be expired and recalculated if necessary
          proposal.expiration.ms=60000

          # The maximum number of replicas that can reside on a broker at any given time.
          max.replicas.per.broker=10000

          # The number of threads to use for proposal candidate precomputing.
          num.proposal.precompute.threads=1
      - capacityConfig: >-
          {
            "brokerCapacities":[
              {
                "brokerId": "-1",
                "capacity": {
                  "DISK": { "/opt/kafka/data": "15728640" },
                  "CPU": "4000",
                  "NW_IN": "2000000",
                  "NW_OUT": "2000000"
                },
                "doc": "This is the default capacity. Capacity unit used for disk is in MB, cpu is in percentage, network throughput is in KB."
              }
            ]
          }
